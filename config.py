
import asyncio
import logging
from pathlib import Path
from typing import List, Optional

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from pptx import Presentation
from pptx.util import Inches, Pt
import aiohttp
import aiofiles
import os
from PIL import Image
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    API_TOKEN = os.getenv("API_TOKEN", "7567293644:AAHVSPgyYAPt_NaUahhdID2njMK-FrtxaRg")  # –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    MAX_FILE_SIZE = 500 * 1024 * 1024  # 500 MB
    DOWNLOAD_PATH = Path("downloads")
    TEMPLATES_PATH = Path("templates")

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    DOWNLOAD_PATH.mkdir(parents=True, exist_ok=True)
    TEMPLATES_PATH.mkdir(parents=True, exist_ok=True)


class PresentationManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–º–∏"""

    @staticmethod
    async def create_presentation(template_name: Optional[str] = None) -> Presentation:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω"""
        if template_name:
            template_path = Config.TEMPLATES_PATH / template_name
            if template_path.exists():
                return Presentation(template_path)
            else:
                raise FileNotFoundError(f"–®–∞–±–ª–æ–Ω {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return Presentation()

    @staticmethod
    async def add_title_slide(prs: Presentation, title: str, subtitle: str = "") -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–∏—Ç—É–ª—å–Ω—ã–π —Å–ª–∞–π–¥"""
        title_slide = prs.slides.add_slide(prs.slide_layouts[0])
        title_slide.shapes.title.text = title
        if subtitle:
            title_slide.placeholders[1].text = subtitle

    @staticmethod
    async def add_content_slide(prs: Presentation, title: str, content: List[str]) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–∞–π–¥ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
        bullet_slide = prs.slides.add_slide(prs.slide_layouts[1])
        bullet_slide.shapes.title.text = title

        tf = bullet_slide.shapes.placeholders[1].text_frame
        for point in content:
            p = tf.add_paragraph()
            p.text = point
            p.font.size = Pt(18)

    @staticmethod
    async def add_image_slide(prs: Presentation, title: str, image_path: str) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–∞–π–¥ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
        img_slide = prs.slides.add_slide(prs.slide_layouts[5])
        img_slide.shapes.title.text = title

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_path = Path(image_path)
        if img_path.exists():
            left = top = Inches(1)
            img_slide.shapes.add_picture(str(img_path), left, top)
        else:
            raise FileNotFoundError(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


class PresentationBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–º–∏"""

    def __init__(self):
        self.bot = Bot(token=Config.API_TOKEN)
        self.dp = Dispatcher()
        self.presentation_manager = PresentationManager()
        self.register_handlers()

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.handle_document, lambda m: m.document is not None)
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        self.dp.callback_query.register(self.handle_template_choice, lambda c: c.data.startswith('template_'))
        self.dp.callback_query.register(self.handle_callback_queries)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback

    async def handle_callback_queries(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
        if callback.data == "upload_presentation":
            await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
        elif callback.data == "choose_template":
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –≤–∞—à–µ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏.")
        elif callback.data == "create_new":
            await callback.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏.")
        elif callback.data == "help":
            await callback.message.answer("–≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π.")
        else:
            await callback.message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # ... other methods ...

    @staticmethod
    def get_start_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", callback_data="upload_presentation")],
            [InlineKeyboardButton(text="üé® –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="choose_template")],
            [InlineKeyboardButton(text="‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å —Å –Ω—É–ª—è", callback_data="create_new")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ])
        return keyboard

    async def cmd_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Presentation Assistant Bot!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.get_start_keyboard()
        )

    async def handle_document(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"""
        document = message.document

        if not document:
            return

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç {message.from_user.id}: {document.file_name} ({document.file_size} –±–∞–π—Ç)")

        if document.file_size > Config.MAX_FILE_SIZE:
            await message.answer(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {Config.MAX_FILE_SIZE // (1024 * 1024)} –ú–ë")
            return

        try:
            file_id = document.file_id
            file = await self.bot.get_file(file_id)

            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            file_path = Config.DOWNLOAD_PATH / f"{message.from_user.id}_{document.file_name}"

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            async with aiofiles.open(file_path, 'wb') as f:
                await self.bot.download_file(file.file_path, f)

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            prs = Presentation(file_path)

            await message.answer(
                f"‚úÖ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: {len(prs.slides)}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.get_edit_keyboard()
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")

    @staticmethod
    def get_edit_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–∞–π–¥", callback_data="add_slide")],
            [InlineKeyboardButton(text="üñº –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="add_image")],
            [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text")],
            [InlineKeyboardButton(text="üé® –ò–∑–º–µ–Ω–∏—Ç—å –¥–∏–∑–∞–π–Ω", callback_data="change_design")],
            [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save")]
        ])
        return keyboard

    async def handle_template_choice(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞"""
        template_name = callback.data.replace('template_', '')
        try:
            prs = await self.presentation_manager.create_presentation(f"{template_name}.pptx")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
            temp_path = Config.DOWNLOAD_PATH / f"{callback.from_user.id}_temp.pptx"
            prs.save(temp_path)

            await callback.message.answer(
                "‚úÖ –®–∞–±–ª–æ–Ω –≤—ã–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "1. –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç\n"
                "2. –ò–∑–º–µ–Ω–∏—Ç—å –¥–∏–∑–∞–π–Ω\n"
                "3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é",
                reply_markup=self.get_edit_keyboard()
            )
        except FileNotFoundError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞: {e}")
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        finally:
            await self.bot.session.close()


if __name__ == "__main__":
    bot = PresentationBot()
    asyncio.run(bot.run())

